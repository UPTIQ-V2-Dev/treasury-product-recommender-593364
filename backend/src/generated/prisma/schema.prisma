// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  name            String?
  password        String
  role            Role             @default(USER)
  isEmailVerified Boolean          @default(false)
  clientType      String?
  companyName     String?
  phone           String?
  agreeToTerms    Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Token           Token[]
  statements      BankStatement[]
  analyses        AnalysisResult[]
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model BankStatement {
  id               String           @id @default(cuid())
  filename         String
  uploadedAt       DateTime         @default(now())
  fileSize         Int
  bankName         String?
  accountType      String?
  statementPeriod  Json
  processingStatus String           @default("PENDING")
  cloudStorageUrl  String?
  signedUrl        String?
  storageProvider  String?
  storageKey       String?
  user             User             @relation(fields: [userId], references: [id])
  userId           Int
  analyses         AnalysisResult[]
}

model AnalysisResult {
  id                 String         @id @default(cuid())
  statementId        String
  analysisDate       DateTime       @default(now())
  financialInsights  Json?
  recommendations    Json?
  riskProfile        String?
  liquidityCoverage  Float?
  averageBalance     Float?
  cashFlowVolatility Float?
  status             AnalysisStatus @default(PENDING)
  progress           Int            @default(0)
  currentStep        String?
  error              String?
  user               User           @relation(fields: [userId], references: [id])
  userId             Int
  statement          BankStatement  @relation(fields: [statementId], references: [id])
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model TreasuryProduct {
  id             String   @id @default(cuid())
  name           String
  category       String
  description    String
  minInvestment  Float
  expectedReturn Float
  riskLevel      String
  tenure         String
  features       Json
  eligibility    Json
  documents      Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SupportedFormat {
  id          Int    @id @default(autoincrement())
  extension   String
  mimeType    String
  description String

  @@unique([extension, mimeType])
}
